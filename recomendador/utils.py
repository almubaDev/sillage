import requests
import calendar
import random
from datetime import datetime,timedelta
from django.conf import settings
from django.utils.translation import get_language
from django.utils.text import slugify


# ---------------------------------------------------
# üîÅ CONSULTAR CLIMA desde OpenWeatherMap
# ---------------------------------------------------
def consultar_clima(lat, lon, fecha, hora):
    api_key = settings.OPENWEATHER_API_KEY
    dt_objetivo = datetime.combine(fecha, hora)
    url = (
        f"https://api.openweathermap.org/data/2.5/forecast?"
        f"lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=es"
    )

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        bloques = data.get('list', [])
        if not bloques:
            return None

        # Elegimos el bloque m√°s cercano en tiempo
        mejor_bloque = min(
            bloques,
            key=lambda b: abs(datetime.strptime(b['dt_txt'], "%Y-%m-%d %H:%M:%S") - dt_objetivo)
        )

        return {
            'descripcion': mejor_bloque['weather'][0]['description'],
            'temperatura': mejor_bloque['main']['temp'],
            'humedad': mejor_bloque['main']['humidity']
        }

    except Exception as e:
        print("‚ùå Error al consultar clima:", e)
        return None

# ---------------------------------------------------
# üß† CONSTRUIR PROMPT PARA GEMINI
# ---------------------------------------------------


def construir_prompt(obj, perfumes_queryset):
    idioma = get_language()

    lang_intro = {
        'es': "Responde en espa√±ol.",
        'en': "Respond in English.",
    }.get(idioma, "Respond in English.")

    # Determinar estaci√≥n del a√±o
    mes = obj.fecha_evento.month
    estaciones = {
        1: "verano", 2: "verano", 3: "oto√±o", 4: "oto√±o",
        5: "invierno", 6: "invierno", 7: "invierno",
        8: "primavera", 9: "primavera", 10: "primavera",
        11: "verano", 12: "verano"
    }
    estacion = estaciones.get(mes, "desconocida")

    # Determinar momento del d√≠a
    hora = obj.hora_evento.hour
    momento_dia = "ma√±ana" if hora < 12 else "tarde" if hora < 19 else "noche"

    # Mezclar perfumes aleatoriamente para evitar sesgos
    perfumes_lista = list(perfumes_queryset)
    random.shuffle(perfumes_lista)  # üîÅ clave para evitar el sesgo por orden
    
    # Crear dos grupos de perfumes para forzar an√°lisis imparcial
    mitad = len(perfumes_lista) // 2
    grupo1 = perfumes_lista[:mitad]
    grupo2 = perfumes_lista[mitad:]

    # Formatear grupos de perfumes
    def formatear_grupo(grupo):
        return "\n".join([
            f"- {p.nombre.title()} ({p.marca.title()})"
            + (f", perfumista: {p.perfumista}" if p.perfumista else "")
            + (f", acordes: {', '.join(p.acordes)}" if p.acordes else "")
            + (f", notas: {', '.join(p.notas)}" if p.notas else "")
            for p in grupo
        ])

    perfumes_grupo1 = formatear_grupo(grupo1)
    perfumes_grupo2 = formatear_grupo(grupo2)

    prompt = f"""{lang_intro}

Eres un experto perfumista con conocimiento profundo en notas olfativas, comportamiento molecular, estaciones, clima y c√≥digos sociales. Tu tarea es recomendar UN SOLO perfume de la colecci√≥n personal del usuario que sea √≥ptimo para su contexto ambiental, emocional y est√©tico.

## PROTOCOLO DE AN√ÅLISIS IMPARCIAL
**PROHIBIDO considerar:**
- Popularidad de la marca
- Reconocimiento de nombres comerciales
- Precios o valor de mercado
- √âxito de ventas hist√≥rico
- Prestigio de marcas o perfumistas

**OBLIGATORIO analizar EXCLUSIVAMENTE:**
- Notas arom√°ticas espec√≠ficas
- Acordes dominantes
- Comportamiento seg√∫n temperatura y humedad
- Compatibilidad con la ocasi√≥n
- Interacci√≥n con la vestimenta
- Proyecci√≥n en el entorno espec√≠fico

## DATOS CONTEXTUALES DEL EVENTO
- üìç Ubicaci√≥n: {obj.lugar_nombre} ({obj.lugar_tipo})
- üèôÔ∏è Descripci√≥n del entorno: {obj.lugar_descripcion}
- üïí Fecha y hora: {obj.fecha_evento} {obj.hora_evento}
- üå°Ô∏è Clima estimado: {obj.clima_descripcion}, {obj.temperatura}¬∞C, humedad {obj.humedad}%
- üçÇ Estaci√≥n del a√±o: {estacion}
- ‚òÄÔ∏è Momento del d√≠a: {momento_dia}
- üëï Vestimenta: {obj.vestimenta}
- üéØ Ocasi√≥n: {obj.ocasion}
- üß† Expectativa emocional: {obj.expectativa}

## PERFUMES DISPONIBLES - PRIMER GRUPO
{perfumes_grupo1}

## PERFUMES DISPONIBLES - SEGUNDO GRUPO
{perfumes_grupo2}

**IMPORTANTE:** Ambos grupos deben analizarse con la misma profundidad. Ignora completamente nombres de marca. Analiza solo las caracter√≠sticas arom√°ticas y contextuales.

## GU√çA EXPERTA

### üå∏ PRIMAVERA
**D√≠a:** Florales frescos, Acu√°ticos, Foug√®re, Chipre frescos
Acordes: Verde, Floral (ligero), Fresco, Acu√°tico
**Noche:** Florales orientales, Woody florales, Ambarino suave, Gourmand ligeros
Acordes: Floral (intenso), Amaderado, Ambarino, Dulce

### ‚òÄÔ∏è VERANO
**D√≠a:** C√≠tricos, Acu√°ticos, Verdes, Frescos
Acordes: C√≠trico, Marino, Verde, Fresco, Afrutado (ligero)
**Noche:** Florales blancos, Aromatic-foug√®re, Chipre modernos, Orientales frescos
Acordes: Floral blanco, Especiado (ligero), Musgo, Afrutado (tropical)

### üçÇ OTO√ëO
**D√≠a:** Chipre, Woody arom√°ticos, Especiados suaves, Cuero suave
Acordes: Amaderado, Musgo, Especiado, Cuero
**Noche:** Orientales ambarados, Cuero intenso, Especiados, Foug√®re intensos
Acordes: Ambarino, Especiado (intenso), Amaderado profundo, Resinoso

### ‚ùÑÔ∏è INVIERNO
**D√≠a:** Orientales amaderados, Bals√°micos, Gourmand sutiles, Especiados c√°lidos
Acordes: Amaderado, Bals√°mico, Especiado, Dulce
**Noche:** Orientales intensos, Cuero profundo, Gourmand ricos, An√≠males
Acordes: Amaderado pesado, Oudy, Cuero, Tabacoso, Animalico, Especiado intenso

## PROCESO DE AN√ÅLISIS Y RECOMENDACI√ìN

1. **An√°lisis Completo:** Eval√∫a TODOS los perfumes de ambos grupos considerando SOLO sus propiedades arom√°ticas.
2. **An√°lisis Ambiental:** Calcula comportamiento molecular seg√∫n temperatura, humedad y espacio.
3. **Selecci√≥n Preliminar:** Identifica de cada grupo los dos mejores candidatos por compatibilidad qu√≠mica.
4. **Evaluaci√≥n Final:** Compara los 4 finalistas (2 de cada grupo) bas√°ndote √öNICAMENTE en notas y acordes.
5. **Justificaci√≥n Qu√≠mica:** Explica la elecci√≥n bas√°ndote en datos cient√≠ficos olfativos.
6. **Aplicaci√≥n:** Sugiere cantidad de atomizaciones seg√∫n el comportamiento molecular. **No indiques zonas del cuerpo.**

## FORMATO DE RESPUESTA

Empieza con:  
**Recomiendo usar: [NOMBRE DEL PERFUME]**

Luego estructura la respuesta con los siguientes bloques:

1. **An√°lisis Ambiental y Olfativo**  
2. **Evaluaci√≥n de Candidatos (sin mencionar marcas)**  
   - *Finalistas del Primer Grupo por notas y acordes*
   - *Finalistas del Segundo Grupo por notas y acordes*
3. **Justificaci√≥n Final (enfocada en qu√≠mica arom√°tica)**  
4. **Recomendaci√≥n de Aplicaci√≥n**

Aseg√∫rate de NO mencionar prestigio, popularidad o marca como criterios. Enf√≥cate EXCLUSIVAMENTE en la compatibilidad arom√°tica con el contexto.
"""

    print("üì§ PROMPT ENVIADO A GEMINI:\n" + "-"*60 + "\n" + prompt + "\n" + "-"*60)
    return prompt



# ---------------------------------------------------
# ü§ñ LLAMAR GEMINI API (Google Generative Language)
# ---------------------------------------------------
def llamar_ia_gemini(prompt):
    api_key = settings.GEMINI_API_KEY
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

    payload = {
        "contents": [
            {
                "parts": [{"text": prompt}]
            }
        ]
    }

    try:
        res = requests.post(url, json=payload)
        res.raise_for_status()
        data = res.json()
        print("üì• RESPUESTA COMPLETA DE GEMINI:\n", data)
        return data.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', 'No se pudo generar una recomendaci√≥n en este momento.')
    except Exception as e:
        print("‚ùå Error al llamar Gemini:", e)
        return "No se pudo generar una recomendaci√≥n en este momento."
